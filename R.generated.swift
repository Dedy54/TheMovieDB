//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `DetailMovie`.
    static let detailMovie = _R.storyboard.detailMovie()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ListMovie`.
    static let listMovie = _R.storyboard.listMovie()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailMovie", bundle: ...)`
    static func detailMovie(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailMovie)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListMovie", bundle: ...)`
    static func listMovie(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listMovie)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `DetailVideoCollectionCell`.
    static let detailVideoCollectionCell = _R.nib._DetailVideoCollectionCell()
    /// Nib `HomeFilmViewCellCollectionViewCell`.
    static let homeFilmViewCellCollectionViewCell = _R.nib._HomeFilmViewCellCollectionViewCell()
    /// Nib `HomeHeaderSection`.
    static let homeHeaderSection = _R.nib._HomeHeaderSection()
    /// Nib `HomePopularCollectionCell`.
    static let homePopularCollectionCell = _R.nib._HomePopularCollectionCell()
    /// Nib `HomeTopRatedCollectionCell`.
    static let homeTopRatedCollectionCell = _R.nib._HomeTopRatedCollectionCell()
    /// Nib `ListMovieTableViewCell`.
    static let listMovieTableViewCell = _R.nib._ListMovieTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailVideoCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailVideoCollectionCell) instead")
    static func detailVideoCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailVideoCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeFilmViewCellCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeFilmViewCellCollectionViewCell) instead")
    static func homeFilmViewCellCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFilmViewCellCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeHeaderSection", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeHeaderSection) instead")
    static func homeHeaderSection(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeHeaderSection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomePopularCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homePopularCollectionCell) instead")
    static func homePopularCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homePopularCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTopRatedCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTopRatedCollectionCell) instead")
    static func homeTopRatedCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTopRatedCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListMovieTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listMovieTableViewCell) instead")
    static func listMovieTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listMovieTableViewCell)
    }
    #endif

    static func detailVideoCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailVideoCollectionCell? {
      return R.nib.detailVideoCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailVideoCollectionCell
    }

    static func homeFilmViewCellCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFilmViewCellCollectionViewCell? {
      return R.nib.homeFilmViewCellCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFilmViewCellCollectionViewCell
    }

    static func homeHeaderSection(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHeaderSection? {
      return R.nib.homeHeaderSection.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHeaderSection
    }

    static func homePopularCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePopularCollectionCell? {
      return R.nib.homePopularCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePopularCollectionCell
    }

    static func homeTopRatedCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTopRatedCollectionCell? {
      return R.nib.homeTopRatedCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTopRatedCollectionCell
    }

    static func listMovieTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListMovieTableViewCell? {
      return R.nib.listMovieTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListMovieTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DetailVideoCollectionCell`.
    static let detailVideoCollectionCell: Rswift.ReuseIdentifier<DetailVideoCollectionCell> = Rswift.ReuseIdentifier(identifier: "DetailVideoCollectionCell")
    /// Reuse identifier `HomeFilmViewCellCollectionViewCell`.
    static let homeFilmViewCellCollectionViewCell: Rswift.ReuseIdentifier<HomeFilmViewCellCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeFilmViewCellCollectionViewCell")
    /// Reuse identifier `HomeHeaderSection`.
    static let homeHeaderSection: Rswift.ReuseIdentifier<HomeHeaderSection> = Rswift.ReuseIdentifier(identifier: "HomeHeaderSection")
    /// Reuse identifier `ListMovieTableViewCell`.
    static let listMovieTableViewCell: Rswift.ReuseIdentifier<ListMovieTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListMovieTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DetailVideoCollectionCell.validate()
      try _HomeHeaderSection.validate()
    }

    struct _DetailVideoCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DetailVideoCollectionCell

      let bundle = R.hostingBundle
      let identifier = "DetailVideoCollectionCell"
      let name = "DetailVideoCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailVideoCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailVideoCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "play.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play.circle' is used in nib 'DetailVideoCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeFilmViewCellCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeFilmViewCellCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeFilmViewCellCollectionViewCell"
      let name = "HomeFilmViewCellCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFilmViewCellCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFilmViewCellCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _HomeHeaderSection: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeHeaderSection

      let bundle = R.hostingBundle
      let identifier = "HomeHeaderSection"
      let name = "HomeHeaderSection"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHeaderSection? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHeaderSection
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow.right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow.right' is used in nib 'HomeHeaderSection', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomePopularCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomePopularCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePopularCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePopularCollectionCell
      }

      fileprivate init() {}
    }

    struct _HomeTopRatedCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeTopRatedCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTopRatedCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTopRatedCollectionCell
      }

      fileprivate init() {}
    }

    struct _ListMovieTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ListMovieTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ListMovieTableViewCell"
      let name = "ListMovieTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListMovieTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListMovieTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try detailMovie.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listMovie.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct detailMovie: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailMovieViewController = StoryboardViewControllerResource<DetailMovieViewController>(identifier: "DetailMovieViewController")
      let name = "DetailMovie"

      func detailMovieViewController(_: Void = ()) -> DetailMovieViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailMovieViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.detailMovie().detailMovieViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailMovieViewController' could not be loaded from storyboard 'DetailMovie' as 'DetailMovieViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listMovie: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listMovieViewController = StoryboardViewControllerResource<ListMovieViewController>(identifier: "ListMovieViewController")
      let name = "ListMovie"

      func listMovieViewController(_: Void = ()) -> ListMovieViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listMovieViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.listMovie().listMovieViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listMovieViewController' could not be loaded from storyboard 'ListMovie' as 'ListMovieViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
